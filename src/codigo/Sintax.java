
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 29 19:48:28 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 29 19:48:28 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\011\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\005\000\002" +
    "\003\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\004\007\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\005\000\002\006\003" +
    "\000\002\006\005\000\002\006\005\000\002\007\003\000" +
    "\002\007\005\000\002\007\005\000\002\011\011\000\002" +
    "\011\011\000\002\011\011\000\002\011\012\000\002\011" +
    "\012\000\002\012\007\000\002\012\007\000\002\012\007" +
    "\000\002\012\011\000\002\012\011\000\002\013\011\000" +
    "\002\014\005\000\002\014\007\000\002\015\011\000\002" +
    "\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\006\010\001\002\000\004\007\011\001\002\000" +
    "\004\010\012\001\002\000\022\012\020\017\030\020\031" +
    "\021\027\034\016\040\026\043\017\044\022\001\002\000" +
    "\030\011\ufff5\012\ufff5\017\ufff5\020\ufff5\021\ufff5\034\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\043\ufff5\044\ufff5\001\002\000" +
    "\022\012\020\017\030\020\031\021\027\034\016\040\026" +
    "\043\017\044\022\001\002\000\030\011\ufff8\012\ufff8\017" +
    "\ufff8\020\ufff8\021\ufff8\034\ufff8\036\ufff8\037\ufff8\040\ufff8" +
    "\043\ufff8\044\ufff8\001\002\000\004\006\163\001\002\000" +
    "\004\006\155\001\002\000\004\013\150\001\002\000\030" +
    "\011\ufffe\012\ufffe\017\ufffe\020\ufffe\021\ufffe\034\ufffe\036" +
    "\ufffe\037\ufffe\040\ufffe\043\ufffe\044\ufffe\001\002\000\004" +
    "\010\145\001\002\000\030\011\ufffa\012\ufffa\017\ufffa\020" +
    "\ufffa\021\ufffa\034\ufffa\036\ufffa\037\ufffa\040\ufffa\043\ufffa" +
    "\044\ufffa\001\002\000\032\011\ufffc\012\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\034\ufffc\035\126\036\ufffc\037\ufffc\040\ufffc" +
    "\043\ufffc\044\ufffc\001\002\000\022\011\144\012\020\017" +
    "\030\020\031\021\027\034\016\040\026\043\017\001\002" +
    "\000\004\006\105\001\002\000\004\013\076\001\002\000" +
    "\004\013\071\001\002\000\004\013\032\001\002\000\006" +
    "\014\033\015\034\001\002\000\030\011\uffed\012\uffed\017" +
    "\uffed\020\uffed\021\uffed\034\uffed\036\uffed\037\uffed\040\uffed" +
    "\043\uffed\044\uffed\001\002\000\020\006\037\013\041\016" +
    "\046\022\035\023\045\024\042\031\040\001\002\000\004" +
    "\033\067\001\002\000\024\007\uffe2\014\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\032\uffe2\033\uffe2\042\uffe2\001\002" +
    "\000\012\006\037\013\041\016\046\031\040\001\002\000" +
    "\024\007\uffe4\014\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\032\uffe4\033\uffe4\042\uffe4\001\002\000\024\007\uffe6\014" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\032\uffe6\033\uffe6" +
    "\042\uffe6\001\002\000\010\007\ufff3\014\ufff3\032\ufff3\001" +
    "\002\000\024\007\uffdf\014\uffdf\025\055\026\054\027\uffdf" +
    "\030\uffdf\032\uffdf\033\uffdf\042\uffdf\001\002\000\006\014" +
    "\063\032\062\001\002\000\010\007\ufff4\014\ufff4\032\ufff4" +
    "\001\002\000\024\007\uffe5\014\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\032\uffe5\033\uffe5\042\uffe5\001\002\000\010" +
    "\027\052\030\051\033\050\001\002\000\012\006\037\013" +
    "\041\016\046\031\040\001\002\000\012\006\037\013\041" +
    "\016\046\031\040\001\002\000\012\006\037\013\041\016" +
    "\046\031\040\001\002\000\024\007\uffde\014\uffde\025\055" +
    "\026\054\027\uffde\030\uffde\032\uffde\033\uffde\042\uffde\001" +
    "\002\000\012\006\037\013\041\016\046\031\040\001\002" +
    "\000\012\006\037\013\041\016\046\031\040\001\002\000" +
    "\024\007\uffe1\014\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\032\uffe1\033\uffe1\042\uffe1\001\002\000\024\007\uffe0\014" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\032\uffe0\033\uffe0" +
    "\042\uffe0\001\002\000\024\007\uffdd\014\uffdd\025\055\026" +
    "\054\027\uffdd\030\uffdd\032\uffdd\033\uffdd\042\uffdd\001\002" +
    "\000\014\007\ufff1\014\ufff1\027\052\030\051\032\ufff1\001" +
    "\002\000\012\006\037\013\041\016\046\031\040\001\002" +
    "\000\030\011\uffe7\012\uffe7\017\uffe7\020\uffe7\021\uffe7\034" +
    "\uffe7\036\uffe7\037\uffe7\040\uffe7\043\uffe7\044\uffe7\001\002" +
    "\000\014\007\ufff2\014\ufff2\027\052\030\051\032\ufff2\001" +
    "\002\000\010\007\066\027\052\030\051\001\002\000\024" +
    "\007\uffe3\014\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\032" +
    "\uffe3\033\uffe3\042\uffe3\001\002\000\004\022\070\001\002" +
    "\000\010\007\ufff0\014\ufff0\032\ufff0\001\002\000\006\014" +
    "\072\015\073\001\002\000\030\011\uffee\012\uffee\017\uffee" +
    "\020\uffee\021\uffee\034\uffee\036\uffee\037\uffee\040\uffee\043" +
    "\uffee\044\uffee\001\002\000\012\006\037\013\041\016\046" +
    "\031\040\001\002\000\010\014\075\027\052\030\051\001" +
    "\002\000\030\011\uffea\012\uffea\017\uffea\020\uffea\021\uffea" +
    "\034\uffea\036\uffea\037\uffea\040\uffea\043\uffea\044\uffea\001" +
    "\002\000\006\014\077\015\100\001\002\000\030\011\uffec" +
    "\012\uffec\017\uffec\020\uffec\021\uffec\034\uffec\036\uffec\037" +
    "\uffec\040\uffec\043\uffec\044\uffec\001\002\000\006\013\101" +
    "\022\102\001\002\000\004\014\104\001\002\000\004\014" +
    "\103\001\002\000\030\011\uffe9\012\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\034\uffe9\036\uffe9\037\uffe9\040\uffe9\043\uffe9\044" +
    "\uffe9\001\002\000\030\011\uffe8\012\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\034\uffe8\036\uffe8\037\uffe8\040\uffe8\043\uffe8\044" +
    "\uffe8\001\002\000\004\013\107\001\002\000\004\007\115" +
    "\001\002\000\004\041\110\001\002\000\012\006\037\013" +
    "\112\016\046\031\040\001\002\000\010\027\052\030\051" +
    "\042\113\001\002\000\016\007\uffd1\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\042\uffe6\001\002\000\012\006\037\013\041" +
    "\016\046\031\040\001\002\000\010\007\uffd0\027\052\030" +
    "\051\001\002\000\004\010\116\001\002\000\022\012\020" +
    "\017\030\020\031\021\027\034\016\040\026\043\017\044" +
    "\022\001\002\000\022\011\125\012\020\017\030\020\031" +
    "\021\027\034\016\040\026\043\017\001\002\000\030\011" +
    "\ufff7\012\ufff7\017\ufff7\020\ufff7\021\ufff7\034\ufff7\036\ufff7" +
    "\037\ufff7\040\ufff7\043\ufff7\044\ufff7\001\002\000\030\011" +
    "\ufff9\012\ufff9\017\ufff9\020\ufff9\021\ufff9\034\ufff9\036\ufff9" +
    "\037\ufff9\040\ufff9\043\ufff9\044\ufff9\001\002\000\030\011" +
    "\uffff\012\uffff\017\uffff\020\uffff\021\uffff\034\uffff\036\uffff" +
    "\037\uffff\040\uffff\043\uffff\044\uffff\001\002\000\030\011" +
    "\ufffb\012\ufffb\017\ufffb\020\ufffb\021\ufffb\034\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\043\ufffb\044\ufffb\001\002\000\032\011" +
    "\ufffd\012\ufffd\017\ufffd\020\ufffd\021\ufffd\034\ufffd\035\126" +
    "\036\ufffd\037\ufffd\040\ufffd\043\ufffd\044\ufffd\001\002\000" +
    "\030\011\uffd2\012\uffd2\017\uffd2\020\uffd2\021\uffd2\034\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\043\uffd2\044\uffd2\001\002\000" +
    "\004\010\127\001\002\000\026\012\020\017\030\020\031" +
    "\021\027\034\016\036\130\037\132\040\026\043\017\044" +
    "\022\001\002\000\004\011\143\001\002\000\026\011\135" +
    "\012\020\017\030\020\031\021\027\034\016\036\134\037" +
    "\136\040\026\043\017\001\002\000\004\011\133\001\002" +
    "\000\030\011\uffd5\012\uffd5\017\uffd5\020\uffd5\021\uffd5\034" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\043\uffd5\044\uffd5\001\002" +
    "\000\004\014\141\001\002\000\030\011\uffd7\012\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\034\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\043\uffd7\044\uffd7\001\002\000\004\014\137\001\002\000" +
    "\004\011\140\001\002\000\030\011\uffd3\012\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\034\uffd3\036\uffd3\037\uffd3\040\uffd3\043" +
    "\uffd3\044\uffd3\001\002\000\004\011\142\001\002\000\030" +
    "\011\uffd4\012\uffd4\017\uffd4\020\uffd4\021\uffd4\034\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\043\uffd4\044\uffd4\001\002\000\030" +
    "\011\uffd6\012\uffd6\017\uffd6\020\uffd6\021\uffd6\034\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\043\uffd6\044\uffd6\001\002\000\004" +
    "\002\000\001\002\000\022\012\020\017\030\020\031\021" +
    "\027\034\016\040\026\043\017\044\022\001\002\000\022" +
    "\011\147\012\020\017\030\020\031\021\027\034\016\040" +
    "\026\043\017\001\002\000\030\011\uffce\012\uffce\017\uffce" +
    "\020\uffce\021\uffce\034\uffce\036\uffce\037\uffce\040\uffce\043" +
    "\uffce\044\uffce\001\002\000\006\014\151\015\152\001\002" +
    "\000\030\011\uffef\012\uffef\017\uffef\020\uffef\021\uffef\034" +
    "\uffef\036\uffef\037\uffef\040\uffef\043\uffef\044\uffef\001\002" +
    "\000\012\006\037\013\041\016\046\031\040\001\002\000" +
    "\010\014\154\027\052\030\051\001\002\000\030\011\uffeb" +
    "\012\uffeb\017\uffeb\020\uffeb\021\uffeb\034\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\043\uffeb\044\uffeb\001\002\000\020\006\037" +
    "\013\041\016\046\022\035\023\045\024\042\031\040\001" +
    "\002\000\006\007\157\032\062\001\002\000\004\010\160" +
    "\001\002\000\022\012\020\017\030\020\031\021\027\034" +
    "\016\040\026\043\017\044\022\001\002\000\022\011\162" +
    "\012\020\017\030\020\031\021\027\034\016\040\026\043" +
    "\017\001\002\000\030\011\uffcf\012\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\034\uffcf\036\uffcf\037\uffcf\040\uffcf\043\uffcf\044" +
    "\uffcf\001\002\000\020\006\037\013\041\016\046\022\035" +
    "\023\045\024\042\031\040\001\002\000\006\007\165\032" +
    "\062\001\002\000\004\010\166\001\002\000\026\012\020" +
    "\017\030\020\031\021\027\034\016\036\167\037\171\040" +
    "\026\043\017\044\022\001\002\000\004\011\200\001\002" +
    "\000\026\011\174\012\020\017\030\020\031\021\027\034" +
    "\016\036\173\037\175\040\026\043\017\001\002\000\004" +
    "\011\172\001\002\000\032\011\uffda\012\uffda\017\uffda\020" +
    "\uffda\021\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\043\uffda\044\uffda\001\002\000\004\011\177\001\002\000" +
    "\032\011\uffdc\012\uffdc\017\uffdc\020\uffdc\021\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\043\uffdc\044\uffdc\001" +
    "\002\000\004\011\176\001\002\000\032\011\uffd8\012\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\034\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\043\uffd8\044\uffd8\001\002\000\032\011\uffd9" +
    "\012\uffd9\017\uffd9\020\uffd9\021\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\043\uffd9\044\uffd9\001\002\000\032" +
    "\011\uffdb\012\uffdb\017\uffdb\020\uffdb\021\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\043\uffdb\044\uffdb\001\002" +
    "\000\022\012\020\017\030\020\031\021\027\034\016\040" +
    "\026\043\017\044\022\001\002\000\030\011\ufff6\012\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\034\ufff6\036\ufff6\037\ufff6\040" +
    "\ufff6\043\ufff6\044\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\024\004\020\011" +
    "\023\012\022\013\014\015\013\016\012\001\001\000\002" +
    "\001\001\000\020\003\200\004\020\011\023\012\022\013" +
    "\014\015\013\016\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\121\011\123\012\122\013\120\015\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\035\006\042\007\046\010\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\035\006\042\007" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\035" +
    "\006\042\007\060\001\001\000\006\005\035\006\057\001" +
    "\001\000\006\005\035\006\052\001\001\000\002\001\001" +
    "\000\004\005\056\001\001\000\004\005\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\035\006\042\007\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\035\006\042\007\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\035\006\042\007\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\035\006\042\007\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\116\004\020\011\023\012\022\013\014\015\013\016\012" +
    "\001\001\000\014\004\121\011\123\012\122\013\120\015" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\130\004\020\011\023" +
    "\012\022\013\014\015\013\016\012\001\001\000\002\001" +
    "\001\000\014\004\121\011\123\012\122\013\120\015\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\145\004\020" +
    "\011\023\012\022\013\014\015\013\016\012\001\001\000" +
    "\014\004\121\011\123\012\122\013\120\015\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\035\006\042\007\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\035\006\042\007\046\010" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\160\004\020\011\023\012\022\013\014\015\013\016" +
    "\012\001\001\000\014\004\121\011\123\012\122\013\120" +
    "\015\117\001\001\000\002\001\001\000\012\005\035\006" +
    "\042\007\046\010\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\167\004\020\011\023\012\022\013" +
    "\014\015\013\016\012\001\001\000\002\001\001\000\014" +
    "\004\121\011\123\012\122\013\120\015\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\121\011\123\012\122" +
    "\013\120\015\117\016\201\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // REPEAT ::= Repeat Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPEAT",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_FOR ::= Identificador In EXPRESION Dos_puntos EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_FOR ::= Identificador In Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF_ELSE ::= IF Else Llave_a SENTENCIA Next P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF_ELSE ::= IF Else Llave_a SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF_ELSE ::= IF Else Llave_a Next Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF_ELSE ::= IF Else Llave_a Break Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Next Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Break Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Next Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Break Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION Resta TERMINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION Suma TERMINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TERMINO ::= TERMINO Division FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TERMINO ::= TERMINO Multiplicacion FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TERMINO ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FACTOR ::= Parentesis_a EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FACTOR ::= NumeroReal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FACTOR ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FACTOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Logical Identificador Igual SENTENCIA_BOOLEANA P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Character Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Character Identificador Igual Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Double Identificador Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Integer Identificador Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Character Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Logical Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Double Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Integer Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA_BOOLEANA ::= Cadena Op_relacional Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA_BOOLEANA ::= EXPRESION Op_relacional EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA_BOOLEANA ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA_BOOLEANA ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= REPEAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= WHILE SENTENCIA REPEAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Function Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

