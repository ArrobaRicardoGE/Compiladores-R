
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 30 12:02:50 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 30 12:02:50 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\011\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\007\000\002\004\007\000\002\004\007\000\002\004" +
    "\007\000\002\004\007\000\002\017\006\000\002\017\006" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\005\000\002\006\003\000\002\006\005\000\002" +
    "\006\005\000\002\007\003\000\002\007\005\000\002\007" +
    "\005\000\002\011\011\000\002\011\012\000\002\011\012" +
    "\000\002\011\013\000\002\011\013\000\002\012\007\000" +
    "\002\012\007\000\002\012\007\000\002\012\011\000\002" +
    "\012\011\000\002\013\011\000\002\014\005\000\002\014" +
    "\007\000\002\015\011\000\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\006\010\001\002\000\004\007\011\001\002\000" +
    "\004\010\012\001\002\000\024\012\016\013\030\017\032" +
    "\020\033\021\031\034\017\040\027\043\020\044\022\001" +
    "\002\000\032\011\ufff4\012\ufff4\013\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\034\ufff4\036\ufff4\037\ufff4\040\ufff4\043\ufff4\044" +
    "\ufff4\001\002\000\032\011\ufff6\012\ufff6\013\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\034\ufff6\036\ufff6\037\ufff6\040\ufff6\043" +
    "\ufff6\044\ufff6\001\002\000\032\011\ufff8\012\ufff8\013\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\034\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\043\ufff8\044\ufff8\001\002\000\004\013\212\001\002" +
    "\000\004\006\170\001\002\000\004\006\162\001\002\000" +
    "\032\011\ufffe\012\ufffe\013\ufffe\017\ufffe\020\ufffe\021\ufffe" +
    "\034\ufffe\036\ufffe\037\ufffe\040\ufffe\043\ufffe\044\ufffe\001" +
    "\002\000\004\010\157\001\002\000\032\011\ufffa\012\ufffa" +
    "\013\ufffa\017\ufffa\020\ufffa\021\ufffa\034\ufffa\036\ufffa\037" +
    "\ufffa\040\ufffa\043\ufffa\044\ufffa\001\002\000\034\011\ufffc" +
    "\012\ufffc\013\ufffc\017\ufffc\020\ufffc\021\ufffc\034\ufffc\035" +
    "\140\036\ufffc\037\ufffc\040\ufffc\043\ufffc\044\ufffc\001\002" +
    "\000\032\011\ufff2\012\ufff2\013\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\034\ufff2\036\ufff2\037\ufff2\040\ufff2\043\ufff2\044\ufff2" +
    "\001\002\000\026\011\156\012\016\013\030\017\032\020" +
    "\033\021\031\034\017\040\027\043\020\044\022\001\002" +
    "\000\004\006\115\001\002\000\006\015\110\045\107\001" +
    "\002\000\004\013\100\001\002\000\004\013\073\001\002" +
    "\000\004\013\034\001\002\000\006\014\035\015\036\001" +
    "\002\000\032\011\uffea\012\uffea\013\uffea\017\uffea\020\uffea" +
    "\021\uffea\034\uffea\036\uffea\037\uffea\040\uffea\043\uffea\044" +
    "\uffea\001\002\000\020\006\040\013\043\016\050\022\037" +
    "\023\047\024\044\031\042\001\002\000\004\033\071\001" +
    "\002\000\012\006\040\013\043\016\050\031\042\001\002" +
    "\000\024\007\uffdd\014\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\032\uffdd\033\uffdd\042\uffdd\001\002\000\024\007\uffdf" +
    "\014\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\032\uffdf\033" +
    "\uffdf\042\uffdf\001\002\000\024\007\uffe1\014\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\032\uffe1\033\uffe1\042\uffe1\001" +
    "\002\000\010\007\ufff0\014\ufff0\032\ufff0\001\002\000\024" +
    "\007\uffda\014\uffda\025\057\026\056\027\uffda\030\uffda\032" +
    "\uffda\033\uffda\042\uffda\001\002\000\006\014\065\032\064" +
    "\001\002\000\010\007\ufff1\014\ufff1\032\ufff1\001\002\000" +
    "\024\007\uffe0\014\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\032\uffe0\033\uffe0\042\uffe0\001\002\000\010\027\054\030" +
    "\053\033\052\001\002\000\012\006\040\013\043\016\050" +
    "\031\042\001\002\000\012\006\040\013\043\016\050\031" +
    "\042\001\002\000\012\006\040\013\043\016\050\031\042" +
    "\001\002\000\024\007\uffd9\014\uffd9\025\057\026\056\027" +
    "\uffd9\030\uffd9\032\uffd9\033\uffd9\042\uffd9\001\002\000\012" +
    "\006\040\013\043\016\050\031\042\001\002\000\012\006" +
    "\040\013\043\016\050\031\042\001\002\000\024\007\uffdc" +
    "\014\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\032\uffdc\033" +
    "\uffdc\042\uffdc\001\002\000\024\007\uffdb\014\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\032\uffdb\033\uffdb\042\uffdb\001" +
    "\002\000\024\007\uffd8\014\uffd8\025\057\026\056\027\uffd8" +
    "\030\uffd8\032\uffd8\033\uffd8\042\uffd8\001\002\000\014\007" +
    "\uffee\014\uffee\027\054\030\053\032\uffee\001\002\000\012" +
    "\006\040\013\043\016\050\031\042\001\002\000\032\011" +
    "\uffe4\012\uffe4\013\uffe4\017\uffe4\020\uffe4\021\uffe4\034\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\043\uffe4\044\uffe4\001\002\000" +
    "\014\007\uffef\014\uffef\027\054\030\053\032\uffef\001\002" +
    "\000\010\007\070\027\054\030\053\001\002\000\024\007" +
    "\uffde\014\uffde\025\uffde\026\uffde\027\uffde\030\uffde\032\uffde" +
    "\033\uffde\042\uffde\001\002\000\004\022\072\001\002\000" +
    "\010\007\uffed\014\uffed\032\uffed\001\002\000\006\014\074" +
    "\015\075\001\002\000\032\011\uffeb\012\uffeb\013\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\034\uffeb\036\uffeb\037\uffeb\040\uffeb" +
    "\043\uffeb\044\uffeb\001\002\000\012\006\040\013\043\016" +
    "\050\031\042\001\002\000\010\014\077\027\054\030\053" +
    "\001\002\000\032\011\uffe7\012\uffe7\013\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\034\uffe7\036\uffe7\037\uffe7\040\uffe7\043\uffe7" +
    "\044\uffe7\001\002\000\006\014\101\015\102\001\002\000" +
    "\032\011\uffe9\012\uffe9\013\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\034\uffe9\036\uffe9\037\uffe9\040\uffe9\043\uffe9\044\uffe9\001" +
    "\002\000\006\013\103\022\104\001\002\000\004\014\106" +
    "\001\002\000\004\014\105\001\002\000\032\011\uffe6\012" +
    "\uffe6\013\uffe6\017\uffe6\020\uffe6\021\uffe6\034\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\043\uffe6\044\uffe6\001\002\000\032\011" +
    "\uffe5\012\uffe5\013\uffe5\017\uffe5\020\uffe5\021\uffe5\034\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\043\uffe5\044\uffe5\001\002\000" +
    "\012\006\040\013\043\016\050\031\042\001\002\000\012" +
    "\006\040\013\043\016\050\031\042\001\002\000\010\014" +
    "\112\027\054\030\053\001\002\000\032\011\uffe3\012\uffe3" +
    "\013\uffe3\017\uffe3\020\uffe3\021\uffe3\034\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\043\uffe3\044\uffe3\001\002\000\010\014\114" +
    "\027\054\030\053\001\002\000\032\011\uffe2\012\uffe2\013" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\034\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\043\uffe2\044\uffe2\001\002\000\004\013\117\001" +
    "\002\000\004\007\125\001\002\000\004\041\120\001\002" +
    "\000\012\006\040\013\122\016\050\031\042\001\002\000" +
    "\010\027\054\030\053\042\123\001\002\000\016\007\uffcc" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\042\uffe1\001\002\000" +
    "\012\006\040\013\043\016\050\031\042\001\002\000\010" +
    "\007\uffcb\027\054\030\053\001\002\000\004\010\126\001" +
    "\002\000\024\012\016\013\030\017\032\020\033\021\031" +
    "\034\017\040\027\043\020\044\022\001\002\000\026\011" +
    "\137\012\016\013\030\017\032\020\033\021\031\034\017" +
    "\040\027\043\020\044\022\001\002\000\032\011\ufff5\012" +
    "\ufff5\013\ufff5\017\ufff5\020\ufff5\021\ufff5\034\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\043\ufff5\044\ufff5\001\002\000\032\011" +
    "\ufff7\012\ufff7\013\ufff7\017\ufff7\020\ufff7\021\ufff7\034\ufff7" +
    "\036\ufff7\037\ufff7\040\ufff7\043\ufff7\044\ufff7\001\002\000" +
    "\032\011\ufff9\012\ufff9\013\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\034\ufff9\036\ufff9\037\ufff9\040\ufff9\043\ufff9\044\ufff9\001" +
    "\002\000\032\011\uffff\012\uffff\013\uffff\017\uffff\020\uffff" +
    "\021\uffff\034\uffff\036\uffff\037\uffff\040\uffff\043\uffff\044" +
    "\uffff\001\002\000\032\011\ufffb\012\ufffb\013\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\034\ufffb\036\ufffb\037\ufffb\040\ufffb\043" +
    "\ufffb\044\ufffb\001\002\000\032\011\ufff3\012\ufff3\013\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\034\ufff3\036\ufff3\037\ufff3\040" +
    "\ufff3\043\ufff3\044\ufff3\001\002\000\034\011\ufffd\012\ufffd" +
    "\013\ufffd\017\ufffd\020\ufffd\021\ufffd\034\ufffd\035\140\036" +
    "\ufffd\037\ufffd\040\ufffd\043\ufffd\044\ufffd\001\002\000\032" +
    "\011\uffcd\012\uffcd\013\uffcd\017\uffcd\020\uffcd\021\uffcd\034" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\043\uffcd\044\uffcd\001\002" +
    "\000\004\010\141\001\002\000\030\012\016\013\030\017" +
    "\032\020\033\021\031\034\017\036\143\037\144\040\027" +
    "\043\020\044\022\001\002\000\032\011\150\012\016\013" +
    "\030\017\032\020\033\021\031\034\017\036\147\037\151" +
    "\040\027\043\020\044\022\001\002\000\004\011\146\001" +
    "\002\000\004\011\145\001\002\000\032\011\uffd0\012\uffd0" +
    "\013\uffd0\017\uffd0\020\uffd0\021\uffd0\034\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\043\uffd0\044\uffd0\001\002\000\032\011\uffd1" +
    "\012\uffd1\013\uffd1\017\uffd1\020\uffd1\021\uffd1\034\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\043\uffd1\044\uffd1\001\002\000\004" +
    "\014\154\001\002\000\032\011\uffd2\012\uffd2\013\uffd2\017" +
    "\uffd2\020\uffd2\021\uffd2\034\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\043\uffd2\044\uffd2\001\002\000\004\014\152\001\002\000" +
    "\004\011\153\001\002\000\032\011\uffce\012\uffce\013\uffce" +
    "\017\uffce\020\uffce\021\uffce\034\uffce\036\uffce\037\uffce\040" +
    "\uffce\043\uffce\044\uffce\001\002\000\004\011\155\001\002" +
    "\000\032\011\uffcf\012\uffcf\013\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\034\uffcf\036\uffcf\037\uffcf\040\uffcf\043\uffcf\044\uffcf" +
    "\001\002\000\004\002\000\001\002\000\024\012\016\013" +
    "\030\017\032\020\033\021\031\034\017\040\027\043\020" +
    "\044\022\001\002\000\026\011\161\012\016\013\030\017" +
    "\032\020\033\021\031\034\017\040\027\043\020\044\022" +
    "\001\002\000\032\011\uffc9\012\uffc9\013\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\034\uffc9\036\uffc9\037\uffc9\040\uffc9\043\uffc9" +
    "\044\uffc9\001\002\000\020\006\040\013\043\016\050\022" +
    "\037\023\047\024\044\031\042\001\002\000\006\007\164" +
    "\032\064\001\002\000\004\010\165\001\002\000\024\012" +
    "\016\013\030\017\032\020\033\021\031\034\017\040\027" +
    "\043\020\044\022\001\002\000\026\011\167\012\016\013" +
    "\030\017\032\020\033\021\031\034\017\040\027\043\020" +
    "\044\022\001\002\000\032\011\uffca\012\uffca\013\uffca\017" +
    "\uffca\020\uffca\021\uffca\034\uffca\036\uffca\037\uffca\040\uffca" +
    "\043\uffca\044\uffca\001\002\000\020\006\040\013\043\016" +
    "\050\022\037\023\047\024\044\031\042\001\002\000\006" +
    "\007\172\032\064\001\002\000\004\010\173\001\002\000" +
    "\030\012\016\013\030\017\032\020\033\021\031\034\017" +
    "\036\175\037\176\040\027\043\020\044\022\001\002\000" +
    "\032\011\204\012\016\013\030\017\032\020\033\021\031" +
    "\034\017\036\203\037\205\040\027\043\020\044\022\001" +
    "\002\000\004\014\201\001\002\000\004\014\177\001\002" +
    "\000\004\011\200\001\002\000\034\011\uffd5\012\uffd5\013" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\043\uffd5\044\uffd5\001\002\000\004\011" +
    "\202\001\002\000\034\011\uffd6\012\uffd6\013\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\043\uffd6\044\uffd6\001\002\000\004\014\210\001\002" +
    "\000\034\011\uffd7\012\uffd7\013\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\043\uffd7" +
    "\044\uffd7\001\002\000\004\014\206\001\002\000\004\011" +
    "\207\001\002\000\034\011\uffd3\012\uffd3\013\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\043\uffd3\044\uffd3\001\002\000\004\011\211\001\002" +
    "\000\034\011\uffd4\012\uffd4\013\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\043\uffd4" +
    "\044\uffd4\001\002\000\006\014\213\015\214\001\002\000" +
    "\032\011\uffec\012\uffec\013\uffec\017\uffec\020\uffec\021\uffec" +
    "\034\uffec\036\uffec\037\uffec\040\uffec\043\uffec\044\uffec\001" +
    "\002\000\012\006\040\013\043\016\050\031\042\001\002" +
    "\000\010\014\216\027\054\030\053\001\002\000\032\011" +
    "\uffe8\012\uffe8\013\uffe8\017\uffe8\020\uffe8\021\uffe8\034\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\043\uffe8\044\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\025\004\020\011" +
    "\023\012\022\013\014\015\013\016\012\017\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\132\011\135\012\133" +
    "\013\131\015\130\016\127\017\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\040\006\044\007\050\010\045\001\001\000\002" +
    "\001\001\000\010\005\040\006\044\007\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\040" +
    "\006\044\007\062\001\001\000\006\005\040\006\061\001" +
    "\001\000\006\005\040\006\054\001\001\000\002\001\001" +
    "\000\004\005\060\001\001\000\004\005\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\040\006\044\007\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\040\006\044\007\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\040\006\044\007\112\001\001\000\010\005\040" +
    "\006\044\007\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\040\006\044\007\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\040\006\044\007\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\126\004\020" +
    "\011\023\012\022\013\014\015\013\016\012\017\024\001" +
    "\001\000\020\004\132\011\135\012\133\013\131\015\130" +
    "\016\127\017\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\141\004\020\011\023\012\022" +
    "\013\014\015\013\016\012\017\024\001\001\000\020\004" +
    "\132\011\135\012\133\013\131\015\130\016\127\017\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\157\004\020\011\023\012\022\013\014\015\013\016" +
    "\012\017\024\001\001\000\020\004\132\011\135\012\133" +
    "\013\131\015\130\016\127\017\134\001\001\000\002\001" +
    "\001\000\012\005\040\006\044\007\050\010\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\165\004" +
    "\020\011\023\012\022\013\014\015\013\016\012\017\024" +
    "\001\001\000\020\004\132\011\135\012\133\013\131\015" +
    "\130\016\127\017\134\001\001\000\002\001\001\000\012" +
    "\005\040\006\044\007\050\010\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\173\004\020\011\023" +
    "\012\022\013\014\015\013\016\012\017\024\001\001\000" +
    "\020\004\132\011\135\012\133\013\131\015\130\016\127" +
    "\017\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\040\006\044\007\214\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // REPEAT ::= Repeat Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPEAT",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_FOR ::= Identificador In EXPRESION Dos_puntos EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_FOR ::= Identificador In Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IF_ELSE ::= IF Else Llave_a SENTENCIA Next P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IF_ELSE ::= IF Else Llave_a SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF_ELSE ::= IF Else Llave_a Next Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF_ELSE ::= IF Else Llave_a Break Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Next P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Next P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION Resta TERMINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION Suma TERMINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TERMINO ::= TERMINO Division FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TERMINO ::= TERMINO Multiplicacion FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TERMINO ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FACTOR ::= Parentesis_a EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FACTOR ::= NumeroReal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FACTOR ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FACTOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNACION_NUMERICA ::= Identificador Op_atribucion EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_NUMERICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGNACION_NUMERICA ::= Identificador Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_NUMERICA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Logical Identificador Igual SENTENCIA_BOOLEANA P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Character Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Character Identificador Igual Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Double Identificador Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Integer Identificador Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Character Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Logical Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Double Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Integer Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA_BOOLEANA ::= Cadena Op_relacional Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA_BOOLEANA ::= EXPRESION Op_relacional EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA_BOOLEANA ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA_BOOLEANA ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= ASIGNACION_NUMERICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA ASIGNACION_NUMERICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= REPEAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA REPEAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Function Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

