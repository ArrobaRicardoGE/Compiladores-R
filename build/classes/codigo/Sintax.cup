package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
:};

terminal Function, Main, Parentesis_a, Parentesis_c, Llave_a, Llave_c, Integer,
Identificador, P_coma, Igual, Numero, Double, Logical, Character, Cadena, True,
False, Multiplicacion, Division, Suma, Resta, NumeroReal, Op_logico, Op_relacional,
If, Else, Break, Next;

non terminal INICIO, SENTENCIA, DECLARACION, FACTOR, TERMINO, EXPRESION,
SENTENCIA_BOOLEANA, IF, IF_ELSE;

start with INICIO;

INICIO ::= 
    Function Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c
;

SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF |
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE
;

SENTENCIA_BOOLEANA ::= 
    True | 
    False |
    SENTENCIA_BOOLEANA Op_logico EXPRESION |
    EXPRESION Op_relacional EXPRESION  |
    Cadena Op_relacional Cadena
;

DECLARACION ::= 
    Integer Identificador P_coma | 
    Double  Identificador P_coma |
    Logical Identificador P_coma |
    Character Identificador P_coma |
    Integer Identificador Igual EXPRESION P_coma |
    Double Identificador Igual EXPRESION P_coma |
    Character Identificador Igual Cadena P_coma |
    Character Identificador Igual Identificador P_coma |
    Logical Identificador Igual SENTENCIA_BOOLEANA P_coma
;

FACTOR ::= 
    Identificador | Numero | NumeroReal | 
    Parentesis_a EXPRESION Parentesis_c
;

TERMINO ::= 
    FACTOR |
    TERMINO Multiplicacion FACTOR |
    TERMINO Division FACTOR
;

EXPRESION ::=
    TERMINO |
    EXPRESION Suma TERMINO |
    EXPRESION Resta TERMINO
;

IF ::=
    If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c   |
    If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Break Llave_c   |
    If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Next Llave_c |
    If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Break Llave_c   |
    If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Next Llave_c 
;

IF_ELSE ::= 
    IF Else Llave_a SENTENCIA Llave_c    |
    IF Else Llave_a Break Llave_c    |
    IF Else Llave_a Next Llave_c |
    IF Else Llave_a SENTENCIA Break P_coma Llave_c    |
    IF Else Llave_a SENTENCIA Next P_coma Llave_c
;
